#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define MAX_LENGTH 50
#define MAX_ACCOUNTS 10

struct Account 
{
    int id;
    char username[MAX_LENGTH];
    char password[MAX_LENGTH];
};

int isPasswordStrong(const char *password) 
{
    return 1;
}

void addAccount(struct Account accounts[], int *count) 
{
    if (*count >= MAX_ACCOUNTS) 
    {
        printf("Maximum number of accounts reached.\n");
        return;
    }

    printf("Enter username: ");
    scanf("%s", accounts[*count].username);

    int choice;
    printf("Choose an option:\n");
    printf("1. Enter password manually\n");
    printf("2. Generate password\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) 
    {
        printf("Enter password: ");
        scanf("%s", accounts[*count].password);
    } 
    else if (choice == 2) 
    {
        int passwordLength;
        printf("Enter password length: ");
        scanf("%d", &passwordLength);

        if (passwordLength <= 0 || passwordLength > MAX_LENGTH) 
        {
            printf("Invalid password length. Setting password to an empty string.\n");
            accounts[*count].password[0] = '\0';
        } 
        else 
        {
            const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
            const int charsetLength = strlen(charset);

            srand(time(NULL));
            for (int i = 0; i < passwordLength; i++) 
            {
                accounts[*count].password[i] = charset[rand() % charsetLength];
            }
            accounts[*count].password[passwordLength] = '\0';

            printf("Generated password: %s\n", accounts[*count].password);
        }
    } else 
    {
        printf("Invalid choice. Setting password to an empty string.\n");
        accounts[*count].password[0] = '\0';
    }

    accounts[*count].id = *count + 1;
    (*count)++;
}

void checkPasswordStrength() 
{
    char password[MAX_LENGTH];
    printf("Enter password: ");
    scanf("%s", password);

    if (isPasswordStrong(password)) 
    {
        printf("Password is strong.\n");
    } 
        else 
    {
        printf("Password is weak.\n");
    }
}

void displayAccounts(struct Account accounts[], int count) 
{
    if (count == 0) 
    {
        printf("No accounts found.\n");
        return;
    }
    printf("------------------------------");
    printf("\nID\tUsername\tPassword\n");
    for (int i = 0; i < count; i++) 
    {
        printf("%d\t%s\t\t%s\n", accounts[i].id, accounts[i].username, accounts[i].password);
    }
}

void modifyAccount(struct Account accounts[], int count, int accountId) 
{
    displayAccounts(accounts, count);  
    printf("Enter account ID to modify: ");
    scanf("%d", &accountId);
    for (int i = 0; i < count; i++) 
    {
        if (accounts[i].id == accountId) {
            printf("Enter modified username: ");
            scanf("%s", accounts[i].username);
            printf("Enter modified password: ");
            scanf("%s", accounts[i].password);
            printf("Account modified successfully.\n");
            displayAccounts(accounts, count); 
            return;
        }
    }
    printf("Account not found.\n");
    displayAccounts(accounts, count);  
}

void deleteAccount(struct Account accounts[], int *count, int accountId) 
{
    displayAccounts(accounts, *count); 
    printf("Enter account ID to delete: ");
    scanf("%d", &accountId);
    for (int i = 0; i < *count; i++) 
    {
        if (accounts[i].id == accountId) 
        {
            for (int j = i; j < *count - 1; j++) 
            {
                accounts[j] = accounts[j + 1];
            }
            (*count)--;
            printf("Account deleted successfully.\n");
            displayAccounts(accounts, *count);  
            return;
        }
    }
    printf("Account not found.\n");
    displayAccounts(accounts, *count);  
}

int main() 
{
    struct Account accounts[MAX_ACCOUNTS];
    int count = 0;
    int choice;
    int accountId;

    do 
    {
        printf("----------------------------");
        printf("\nPassword Manager\n");
        printf("\n1. Add Account\n");
        printf("2. Check Password Strength\n");
        printf("3. Display Accounts\n");
        printf("4. Modify Account\n");
        printf("5. Delete Account\n");
        printf("6. Exit\n");
        printf("-----------------------------");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) 
        {
            case 1:
                addAccount(accounts, &count);
                break;
            case 2:
                checkPasswordStrength();
                break;
            case 3:
                displayAccounts(accounts, count);
                break;
            case 4:
                modifyAccount(accounts, count, accountId);
                break;
            case 5:
                deleteAccount(accounts, &count, accountId);
                break;
            case 6:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Try again.\n");
                break;
        }
    } while (choice != 6);

    return 0;
}
